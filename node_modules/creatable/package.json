{
  "name": "creatable",
  "version": "3.0.3",
  "description": "Elegant HTML generation. No templating. Just Javascript.",
  "main": "creatable.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/RaineOrShine/creatable.git"
  },
  "author": {
    "name": "Raine Lourie"
  },
  "keywords": [
    "dom",
    "html",
    "templates",
    "templating"
  ],
  "license": "BSD",
  "gitHead": "3ad55908257889cb62628f7a9b49939e852977b9",
  "readmeFilename": "README.md",
  "devDependencies": {
    "mocha": "~1.9.0",
    "chai": "~1.5.0"
  },
  "dependencies": {
    "node-html-encoder": "0.0.2"
  },
  "readme": "Create DOM Elements with nestable arrays that reflect the structure of HTML:\r\n\r\n```javascript\r\ndocument.body.appendChild(Creatable.create(\r\n\t[\"#content\", [\r\n\t\t[\"h1.prominent\", \"Blogs\"],\r\n\t\t[\"ul\", [\r\n\t\t\t[\"li a\", { href: \"http://functionsource.com\" }, \"FunctionSource\"],\r\n\t\t\t[\"li a\", { href: \"http://javascriptweblog.wordpress.com\" }, \"Javascript, Javascript\"],\r\n\t\t\t[\"li a\", { href: \"http://ejohn.org/category/blog\" }, \"John Resig\"]\r\n\t\t]]\r\n\t]]\r\n))\r\n```\r\n\r\nResults in:\r\n\r\n```html\r\n<div id=\"content\">\r\n\t<h1 class=\"prominent\">Blogs</h1>\r\n\t<ul>\r\n\t\t<li><a href=\"http://functionsource.com\">FunctionSource</a></li>\r\n\t\t<li><a href=\"http://javascriptweblog.wordpress.com\">Javascript, Javascript</a></li>\r\n\t\t<li><a href=\"http://ejohn.org/category/blog\">John Resig</a></li>\r\n\t</ul>\r\n</div>\r\n```\r\n\r\nIt all happens with one function: **Creatable.create**\r\n\r\n```javascript\r\nCreatable.create([TAGNAME, ATTRIBUTES, CHILDREN|CONTENT]) // returns a native DOM element\r\nCreatable.create([\"a\", { href: \"http://google.com\" }, \"Google\"]);\r\n```\r\n\r\nWhy?\r\n-----------\r\n* Switching in and out of Javascript and whatever templating language you use is ugly.\r\n* No special templating language syntax. 100% pure Javascript.\r\n* Implement view composition using plain, old functions.\r\n* Properly formatted input still reflects the actual structure of HTML for readability.\r\n\r\nDocumentation\r\n===========\r\n\r\nSpecify ids and classes with css-syntax\r\n-----------\r\n\r\n```javascript\r\nCreatable.create([\"div#footer\", [\r\n\t[\"p.fine-print\", \"Don't forget to read this!\"]\r\n]])\r\n```\r\n\r\n```html\r\n<div id=\"footer\">\r\n\t<p class=\"fine-print\">Don't forget to read this!</p>\r\n</div>\r\n```\r\n\r\nDocument Fragments\r\n-----------\r\n\r\n```javascript\r\nCreatable.create([[\r\n\t[\"p\", \"First paragraph!!!\"],\r\n\t[\"p\", \"Second paragraph!!!\"],\r\n\t[\"p\", \"Third paragraph I'm bored\"]\r\n]]);\r\n```\r\n\r\n```html\r\n<p>First paragraph!!!\"</p>\r\n<p>Second paragraph!!!\"</p>\r\n<p>Third paragraph I'm bored</p>\r\n```\r\n\r\nHTML is automatically escaped\r\n-----------\r\n\r\n```javascript\r\nCreatable.create(['p', 'Something <strong>important</strong> to say.'])\r\n```\r\n\r\n```html\r\n<p>Something &lt;strong&gt;important&lt;/strong&gt; to say.</p>\r\n```\r\n\r\nYou can unescape HTML by adding { html: true }\r\n\r\n```javascript\r\nCreatable.create(['p', { html: true }, 'Something <strong>important</strong> to say.'])\r\n```\r\n\r\n```html\r\n<p>Something <strong>important</strong> to say.</p>\r\n```\r\n\r\nHighly compatible with underscore and functional programming\r\n-----------\r\n\r\n```javascript\r\nvar links = [\r\n\t{ url: \"http://functionsource.com\", label: \"FunctionSource\" },\r\n\t{ url: \"http://javascriptweblog.wordpress.com\", label: \"Javascript, Javascript\" },\r\n\t{ url: \"http://ejohn.org/category/blog\", label: \"John Resig\" }\r\n];\r\n\r\nvar buildLinkItem = function(model) {\r\n\treturn [\"li\", [\r\n\t\t[\"a\", { href: model.url }, model.label]\r\n\t]];\r\n};\r\n\r\nCreatable.create([\"ul\", _.map(links, buildLinkItem)])\r\n```\r\n\r\n```html\r\n<ul>\r\n\t<li><a href=\"http://functionsource.com\">FunctionSource</a></li>\r\n\t<li><a href=\"http://javascriptweblog.wordpress.com\">Javascript, Javascript</a></li>\r\n\t<li><a href=\"http://ejohn.org/category/blog\">John Resig</a></li>\r\n</ul>\r\n```\r\n\r\nBuilt-in support for jQuery elements\r\n-----------\r\n```javascript\r\nCreatable.create([\"#myModule\", [\r\n\t[\"h1\", \"This is a header\"],\r\n\t\"Some text.\",\r\n\t$(\"<div><p>Go, Go jQuery</p></div>\")\r\n]])\r\n```\r\n\r\n```html\r\n<div id=\"myModule\">\r\n\t<h1>This is a header</h1>\r\n\tSome text.\r\n\t<div><p>Go, Go jQuery</p></div>\r\n</div>\r\n```\r\n\r\nUse it to return a string of HTML instead of a DOM node\r\n-----------\r\n```javascript\r\nvar html = Creatable.createHtml(['a#go.small.button', 'test']);\r\nconsole.log(html); //<a id=\"go\" class=\"small button\">test</a>\r\n```\r\n\r\n\r\nUnit Tests\r\n===========\r\n\r\n**creatable** has full [unit test coverage](https://github.com/RaineOrShine/creatable/tree/master/test) using mocha.\r\n\r\nInstallation\r\n===========\r\n\r\nJust include creatable.js in your HTML:\r\n\r\n```html\r\n<script src=\"creatable.js\"></script>\r\n```\r\n\r\n\r\n",
  "_id": "creatable@3.0.3",
  "_from": "creatable@~3.0.3"
}
